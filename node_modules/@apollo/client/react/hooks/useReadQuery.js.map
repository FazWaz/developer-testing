{"version":3,"file":"useReadQuery.js","sourceRoot":"","sources":["../../../src/react/hooks/useReadQuery.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACrD,OAAO,SAAS,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAE,sBAAsB,EAAuB,MAAM,yBAAyB,CAAC;AACtF,OAAO,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAEnD,MAAM,UAAU,YAAY,CAAQ,QAA+B;IAC3D,IAAA,KAAkB,QAAQ,CAAC,CAAC,CAAC,EAA1B,WAAW,QAAe,CAAC;IACpC,IAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAsB,CAAC,CAAC;IAC1D,SAAS,CACP,gBAAgB,CAAC,YAAY,EAC7B,2EAA2E;QACzE,sEAAsE;QACtE,kFAAkF,CACrF,CAAC;IAEF,IAAM,UAAU,GAAG,OAAO,CAAC;QACzB,IAAM,KAAK,GAAG,aAAa,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAErD,OAAO;YACL,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI;YAClC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK;YAChE,KAAK,OAAA;SACN,CAAC;IACJ,CAAC,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;IAE9B,IAAI,OAAO,GAAG,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAEtE,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC;QACnC,gBAAgB,CAAC,YAAY,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAClE;IAED,SAAS,CAAC;QACR,OAAO,gBAAgB,CAAC,MAAM,CAAC,UAAC,OAAO;YACrC,gBAAgB,CAAC,YAAa,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAClE,WAAW,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,GAAG,CAAC,EAAb,CAAa,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,IAAM,MAAM,GACV,gBAAgB,CAAC,iBAAiB,CAAC,WAAW,KAAK,SAAS;QAC1D,CAAC,CAAC,UAAU;QACZ,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAErB,OAAO,OAAO,CAAC;QACb,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,aAAa,EAAE,MAAM,CAAC,aAAa;YACnC,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC;SAC7B,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;AACf,CAAC","sourcesContent":["import { useState, useMemo, useEffect } from \"react\";\nimport invariant from \"ts-invariant\";\nimport { NetworkStatus } from \"../../core\";\nimport { QUERY_REFERENCE_SYMBOL, type QueryReference } from \"../cache/QueryReference\";\nimport { __use } from \"./internal\";\nimport { toApolloError } from \"./useSuspenseQuery\";\n\nexport function useReadQuery<TData>(queryRef: QueryReference<TData>) {\n  const [, forceUpdate] = useState(0);\n  const internalQueryRef = queryRef[QUERY_REFERENCE_SYMBOL];\n  invariant(\n    internalQueryRef.promiseCache,\n    'It appears that `useReadQuery` was used outside of `useBackgroundQuery`. ' +\n      '`useReadQuery` is only supported for use with `useBackgroundQuery`. ' +\n      'Please ensure you are passing the `queryRef` returned from `useBackgroundQuery`.'\n  );\n\n  const skipResult = useMemo(() => {\n    const error = toApolloError(internalQueryRef.result);\n\n    return {\n      loading: false,\n      data: internalQueryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error,\n    };\n  }, [internalQueryRef.result]);\n\n  let promise = internalQueryRef.promiseCache.get(internalQueryRef.key);\n\n  if (!promise) {\n    promise = internalQueryRef.promise;\n    internalQueryRef.promiseCache.set(internalQueryRef.key, promise);\n  }\n\n  useEffect(() => {\n    return internalQueryRef.listen((promise) => {\n      internalQueryRef.promiseCache!.set(internalQueryRef.key, promise);\n      forceUpdate((prevState) => prevState + 1);\n    });\n  }, [queryRef]);\n\n  const result =\n    internalQueryRef.watchQueryOptions.fetchPolicy === 'standby'\n      ? skipResult\n      : __use(promise);\n\n  return useMemo(() => {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result),\n    };\n  }, [result]);\n}\n"]}