import { useState, useMemo, useCallback } from 'react';
import { useApolloClient } from "./useApolloClient.js";
import { QUERY_REFERENCE_SYMBOL, } from "../cache/QueryReference.js";
import { useSuspenseCache } from "./useSuspenseCache.js";
import { useTrackedQueryRefs, useWatchQueryOptions } from "./useSuspenseQuery.js";
import { canonicalStringify } from "../../cache/index.js";
export function useBackgroundQuery(query, options) {
    if (options === void 0) { options = Object.create(null); }
    var suspenseCache = useSuspenseCache(options.suspenseCache);
    var client = useApolloClient(options.client);
    var watchQueryOptions = useWatchQueryOptions({ client: client, query: query, options: options });
    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;
    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;
    var cacheKey = [client, query, canonicalStringify(variables)].concat(queryKey);
    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {
        return client.watchQuery(watchQueryOptions);
    });
    var currentFetchPolicy = queryRef.watchQueryOptions.fetchPolicy;
    var _b = useState(function () { return new Map([[queryRef.key, queryRef.promise]]); }), promiseCache = _b[0], setPromiseCache = _b[1];
    if (currentFetchPolicy === 'standby' && fetchPolicy !== currentFetchPolicy) {
        var promise = queryRef.reobserve({ fetchPolicy: fetchPolicy });
        promiseCache.set(queryRef.key, promise);
    }
    useTrackedQueryRefs(queryRef);
    var fetchMore = useCallback(function (options) {
        var promise = queryRef.fetchMore(options);
        setPromiseCache(function (promiseCache) {
            return new Map(promiseCache).set(queryRef.key, promise);
        });
        return promise;
    }, [queryRef]);
    var refetch = useCallback(function (variables) {
        var promise = queryRef.refetch(variables);
        setPromiseCache(function (promiseCache) {
            return new Map(promiseCache).set(queryRef.key, promise);
        });
        return promise;
    }, [queryRef]);
    queryRef.promiseCache = promiseCache;
    return useMemo(function () {
        var _a;
        return [
            (_a = {}, _a[QUERY_REFERENCE_SYMBOL] = queryRef, _a),
            {
                fetchMore: fetchMore,
                refetch: refetch,
            },
        ];
    }, [queryRef, fetchMore, refetch]);
}
//# sourceMappingURL=useBackgroundQuery.js.map