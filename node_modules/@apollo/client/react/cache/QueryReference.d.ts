import type { ApolloQueryResult, ObservableQuery, OperationVariables, WatchQueryOptions } from '../../core';
import type { CacheKey } from './types';
type Listener<TData> = (promise: Promise<ApolloQueryResult<TData>>) => void;
type FetchMoreOptions<TData> = Parameters<ObservableQuery<TData>['fetchMore']>[0];
export declare const QUERY_REFERENCE_SYMBOL: unique symbol;
export interface QueryReference<TData = unknown> {
    [QUERY_REFERENCE_SYMBOL]: InternalQueryReference<TData>;
}
interface InternalQueryReferenceOptions {
    key: CacheKey;
    onDispose?: () => void;
    autoDisposeTimeoutMs?: number;
}
export declare class InternalQueryReference<TData = unknown> {
    result: ApolloQueryResult<TData>;
    readonly key: CacheKey;
    readonly observable: ObservableQuery<TData>;
    promiseCache?: Map<any[], Promise<ApolloQueryResult<TData>>>;
    promise: Promise<ApolloQueryResult<TData>>;
    private subscription;
    private listeners;
    private autoDisposeTimeoutId;
    private initialized;
    private refetching;
    private resolve;
    private reject;
    constructor(observable: ObservableQuery<TData>, options: InternalQueryReferenceOptions);
    get watchQueryOptions(): WatchQueryOptions<OperationVariables, TData>;
    listen(listener: Listener<TData>): () => void;
    refetch(variables: OperationVariables | undefined): Promise<ApolloQueryResult<TData>>;
    fetchMore(options: FetchMoreOptions<TData>): Promise<ApolloQueryResult<TData>>;
    reobserve(watchQueryOptions: Partial<WatchQueryOptions<OperationVariables, TData>>): Promise<ApolloQueryResult<TData>>;
    dispose(): void;
    private onDispose;
    private handleNext;
    private handleError;
    private deliver;
}
export {};
//# sourceMappingURL=QueryReference.d.ts.map